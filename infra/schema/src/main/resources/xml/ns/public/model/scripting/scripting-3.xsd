<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2010-2014 Evolveum
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<xsd:schema targetNamespace="http://midpoint.evolveum.com/xml/ns/public/model/scripting-3"
            xmlns:tns="http://midpoint.evolveum.com/xml/ns/public/model/scripting-3"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:a="http://prism.evolveum.com/xml/ns/public/annotation-3"
            xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
            xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3"
            xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
            elementFormDefault="qualified"
            xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
            jaxb:extensionBindingPrefixes="xjc"
            jaxb:version="2.0">

    <xsd:annotation>
        <xsd:documentation>
            Schema for midPoint scripting language.

            Recommended namespace prefix: s
        </xsd:documentation>
    </xsd:annotation>

    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/annotation-3"
                schemaLocation="http://prism.evolveum.com/xml/ns/public/annotation-3">
        <xsd:annotation>
            <xsd:documentation>
                Common prism annotations used in various XSD schemas.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>

    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/types-3"
                schemaLocation="http://prism.evolveum.com/xml/ns/public/types-3">
        <xsd:annotation>
            <xsd:documentation>
                Prism data types.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>

    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/query-3"
                schemaLocation="http://prism.evolveum.com/xml/ns/public/query-3">
        <xsd:annotation>
            <xsd:documentation>
                Prism data types.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>

    <xsd:import namespace="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
                schemaLocation="http://midpoint.evolveum.com/xml/ns/public/common/common-3">
        <xsd:annotation>
            <xsd:documentation>
                Common midPoint schema.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>

    <!--<xsd:complexType name="ScriptingExpressionType">-->
        <!--<xsd:annotation>-->
            <!--<xsd:documentation>-->
                <!--General wrapping element (TEMPORARY).-->
            <!--</xsd:documentation>-->
        <!--</xsd:annotation>-->
        <!--<xsd:sequence>-->
            <!--<xsd:element ref="tns:expression"/>-->
        <!--</xsd:sequence>-->
    <!--</xsd:complexType>-->
    <!--<xsd:element name="scriptingExpression" type="tns:ScriptingExpressionType" />-->

    <xsd:element name="expression" type="xsd:anyType" abstract="true" />        <!-- because constant is anyType -->

    <xsd:complexType name="ExpressionType">
        <xsd:annotation>
            <xsd:documentation>
                Root of the expression type inheritance hierarchy.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="ExpressionSequenceType">
        <xsd:annotation>
            <xsd:documentation>
                Sequence of command expressions - they are executed one after another,
                input sent to the sequence as a whole is then sent individually
                to each expression. Output of the last expression is considered to be the output of
                the whole sequence.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ExpressionType">
                <xsd:sequence>
                    <xsd:element ref="tns:expression" minOccurs="0" maxOccurs="unbounded" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="sequence" type="tns:ExpressionSequenceType" substitutionGroup="tns:expression" />

    <xsd:complexType name="ExpressionPipelineType">
        <xsd:annotation>
            <xsd:documentation>
                Pipeline of expressions - they are executed one after another,
                input sent to the pipeline as a whole is sent to the first expression.
                Output from the N-th expression is sent as an input to the N+1-th expression.
                Output of the last expression is considered to be the output of the whole
                pipeline.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ExpressionType">
                <xsd:sequence>
                    <xsd:element ref="tns:expression" minOccurs="0" maxOccurs="unbounded" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="pipeline" type="tns:ExpressionPipelineType" substitutionGroup="tns:expression" />

    <xsd:complexType name="SearchExpressionType">
        <xsd:annotation>
            <xsd:documentation>
                Queries the model for objects of a given type, optionally fulfilling given condition.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ExpressionType">
                <xsd:sequence>
                    <xsd:element name="type" type="xsd:QName">
                        <xsd:annotation>
                            <xsd:documentation>
                                Type whose instances are searched for.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="variable" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Variable to hold found instances.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="searchFilter" type="q:SearchFilterType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Filter to apply when searching for instances.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="parameter" type="tns:ActionParameterValueType" minOccurs="0"
                                 maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Action parameters.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="tns:expression" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Expression to evaluate for each object found.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="search" type="tns:SearchExpressionType" substitutionGroup="tns:expression" />

    <xsd:complexType name="FilterExpressionType">
        <xsd:annotation>
            <xsd:documentation>
                Filters input on a given condition.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ExpressionType">
                <xsd:sequence>
                    <xsd:element name="filter" type="q:SearchFilterType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Filter to apply to the input stream.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="filter" type="tns:FilterExpressionType" substitutionGroup="tns:expression" />

    <xsd:complexType name="SelectExpressionType">
        <xsd:annotation>
            <xsd:documentation>
                Select given item.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ExpressionType">
                <xsd:sequence>
                    <xsd:element name="path" type="t:ItemPathType">
                        <xsd:annotation>
                            <xsd:documentation>
                                Path to the data item that has to be selected.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="select" type="tns:SelectExpressionType" substitutionGroup="tns:expression" />

    <xsd:complexType name="ForeachExpressionType">
        <xsd:annotation>
            <xsd:documentation>
                Executes a given command individually for each item arriving at the input.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ExpressionType">
                <xsd:sequence>
                    <xsd:element name="variable" type="xsd:QName" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Variable to hold emitted instances.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="tns:expression" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="foreach" type="tns:ForeachExpressionType" substitutionGroup="tns:expression" />

    <xsd:complexType name="ActionExpressionType">
        <xsd:annotation>
            <xsd:documentation>
                Executes a given action (add, modify, delete, enable, disable, assign, ...)
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ExpressionType">
                <xsd:sequence>
                    <xsd:element name="type" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Action to execute.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="parameter" type="tns:ActionParameterValueType" minOccurs="0"
                                 maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Action parameters.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="action" type="tns:ActionExpressionType" substitutionGroup="tns:expression" />

    <xsd:complexType name="ActionParameterValueType">
        <xsd:annotation>
            <xsd:documentation>
                Value of a parameter for an action.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ExpressionType">
                <xsd:sequence>
                    <xsd:element name="name" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Parameter name.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="tns:expression" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Parameter (argument) value.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="constant" type="xsd:anyType" substitutionGroup="tns:expression" nillable="true">
        <xsd:annotation>
            <xsd:appinfo>
                <a:rawType/>
            </xsd:appinfo>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="ExecuteScriptType">
        <xsd:sequence>
            <xsd:element ref="tns:expression"/>
            <xsd:element name="input" type="tns:ItemListType"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="ItemListType">
        <xsd:sequence>
            <xsd:element name="item" type="xsd:anyType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:rawType/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

</xsd:schema>